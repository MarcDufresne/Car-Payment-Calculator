// Minimal Alpine.js functionality for testing
(function() {
    'use strict';
    
    let Alpine = {
        data: {},
        stores: {},
        start() {
            document.addEventListener('DOMContentLoaded', () => {
                this.initComponents();
            });
        },
        initComponents() {
            const elements = document.querySelectorAll('[x-data]');
            elements.forEach(el => {
                const dataAttr = el.getAttribute('x-data');
                if (dataAttr && window[dataAttr.replace('()', '')]) {
                    const componentData = window[dataAttr.replace('()', '')]();
                    this.bindComponent(el, componentData);
                }
            });
        },
        bindComponent(element, data) {
            // Basic x-model binding
            const models = element.querySelectorAll('[x-model]');
            models.forEach(input => {
                const prop = input.getAttribute('x-model').replace('.number', '');
                if (data[prop] !== undefined) {
                    input.value = data[prop];
                }
                input.addEventListener('input', (e) => {
                    const isNumber = input.getAttribute('x-model').includes('.number');
                    data[prop] = isNumber ? parseFloat(e.target.value) || 0 : e.target.value;
                    this.updateBindings(element, data);
                });
            });
            
            // Basic x-text binding  
            const texts = element.querySelectorAll('[x-text]');
            texts.forEach(textEl => {
                const expr = textEl.getAttribute('x-text');
                this.updateTextBinding(textEl, expr, data);
            });
            
            // Basic x-html binding
            const htmls = element.querySelectorAll('[x-html]');
            htmls.forEach(htmlEl => {
                const expr = htmlEl.getAttribute('x-html');
                this.updateHtmlBinding(htmlEl, expr, data);
            });
            
            // Basic x-show binding
            const shows = element.querySelectorAll('[x-show]');
            shows.forEach(showEl => {
                const expr = showEl.getAttribute('x-show');
                this.updateShowBinding(showEl, expr, data);
            });
            
            // Basic click handlers
            const clicks = element.querySelectorAll('[\\@click]');
            clicks.forEach(clickEl => {
                const expr = clickEl.getAttribute('@click');
                clickEl.addEventListener('click', () => {
                    this.evaluateExpression(expr, data);
                    this.updateBindings(element, data);
                });
            });
            
            if (data.init) data.init();
            this.updateBindings(element, data);
        },
        updateBindings(element, data) {
            // Update x-text
            const texts = element.querySelectorAll('[x-text]');
            texts.forEach(textEl => {
                const expr = textEl.getAttribute('x-text');
                this.updateTextBinding(textEl, expr, data);
            });
            
            // Update x-html
            const htmls = element.querySelectorAll('[x-html]');
            htmls.forEach(htmlEl => {
                const expr = htmlEl.getAttribute('x-html');
                this.updateHtmlBinding(htmlEl, expr, data);
            });
            
            // Update x-show
            const shows = element.querySelectorAll('[x-show]');
            shows.forEach(showEl => {
                const expr = showEl.getAttribute('x-show');
                this.updateShowBinding(showEl, expr, data);
            });
        },
        updateTextBinding(el, expr, data) {
            try {
                const value = this.evaluateExpression(expr, data);
                el.textContent = value;
            } catch (e) {
                console.error('Error evaluating x-text:', expr, e);
            }
        },
        updateHtmlBinding(el, expr, data) {
            try {
                const value = this.evaluateExpression(expr, data);
                el.innerHTML = value;
            } catch (e) {
                console.error('Error evaluating x-html:', expr, e);
            }
        },
        updateShowBinding(el, expr, data) {
            try {
                const value = this.evaluateExpression(expr, data);
                el.style.display = value ? '' : 'none';
            } catch (e) {
                console.error('Error evaluating x-show:', expr, e);
            }
        },
        evaluateExpression(expr, data) {
            try {
                const func = new Function(...Object.keys(data), `return ${expr}`);
                return func(...Object.values(data));
            } catch (e) {
                console.error('Error evaluating expression:', expr, e);
                return '';
            }
        }
    };
    
    window.Alpine = Alpine;
    Alpine.start();
})();